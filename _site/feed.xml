<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.0">Jekyll</generator><link href="http://brentbrinkley.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://brentbrinkley.com/" rel="alternate" type="text/html" /><updated>2017-07-12T02:58:02-04:00</updated><id>http://brentbrinkley.com/</id><title type="html">Brent Brinkley</title><subtitle>Web Developer</subtitle><entry><title type="html">Random Musings</title><link href="http://brentbrinkley.com/random-musings/" rel="alternate" type="text/html" title="Random Musings" /><published>2017-07-11T00:00:00-04:00</published><updated>2017-07-11T00:00:00-04:00</updated><id>http://brentbrinkley.com/random-musings</id><content type="html" xml:base="http://brentbrinkley.com/random-musings/">&lt;p&gt;I ponder a lot about JavaScript usually it goes something like “Wait… What? Why is that not… I hate this language. Who TF thought using this was a good idea?!” And every time that happens I inevitably end up asking myself “Why don’t we do better than this?” Which is something that has always piqued my interest because I’m really good at taking small pieces of complex material, distilling them to their purest form, and building something better in the place of the old way of doing things.&lt;/p&gt;

&lt;p&gt;What fascinates and infuriates me about developers is that for decades we have built stunningly beautiful and world altering ways to interface with computers. Yet we haven’t even scratched the surface on what could be done if we turned that same eye towards our own trade and tools. It’s 2017 how is it possible that text editors have barely changed? Sure there are way more plugins and fancy colors, but outside of that what’s drastically different?&lt;/p&gt;

&lt;p&gt;As I’ve looked at this problem a couple of things are apparent to me. 1) Syntax has gone as far as it’s going to go in terms of becoming more human at least for the foreseeable future. 2) The onus to improve shouldn’t have been on syntax anyway. The editor needs to be the thing that demystifies code for the user.&lt;/p&gt;

&lt;p&gt;Let take a look at some code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Assign a String to a variable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is my amazing String!!&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call Variable&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someVar&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;someVar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Did you notice anything? No? Well the first thing that jumps out at me is there’s a string assigned to this variable. That string has a lovely green color denoting to everyone that “Hey! I’m a string!”. But when you call the variable you’ll notice it’s black. This has to be one of the simplest, yet glaring quality of life improvements I’ve ever seen in my life. What if when you looked a variable or a function you knew roughly what was contained inside of them because the color corresponded to the assignment? HOLY SHIT WHAT A NOVEL IDEA!&lt;/p&gt;

&lt;p&gt;Instead of having a series of random, though oddly soothing, colors just strewn about. Assign colors based on the type of object conatained within. That way when you’re glancing at a bloated document instead of going “wait wtf does this function do again?” You know at the very least “Ah that returns a number”&lt;/p&gt;

&lt;p&gt;I also feel very strongly about having some kind of feedback loop. &lt;a href=&quot;http://worrydream.com/&quot;&gt;Bret Victor&lt;/a&gt; is a genius and I feel like he’s absolutely right in most of his musings. Programming is the only art where you don’t get to see your work in realtime as you’re creating it. I’m not sure what something like this should look like but I know Swift playgrounds and interactive repls are a step in the right direction. At no time should you not be able to tug at different parts of your code to see what’s contained inside of it.&lt;/p&gt;

&lt;p&gt;Something that would work well in conjunction with the aforementioned setup is the ability to focus on a chain of code. So say I have a function calling another series of functions. Not the entirety of my program, but a large chunk of it. At any point in time one should be able to to isolate the function summoning these other functions in a focus mode that fades out the rest of the program so that I can clearly observe what’s being called and in what order.&lt;/p&gt;

&lt;p&gt;I would go a lot further than this and implement not a language in itself but a language interface. Something that would add graphical enhancements that could be used on any language creating a unified look and feel for how code behaves. I’ve actually got some mockups that I may share at somepoint and explain in further detail. But for now the next frontier of coding is in our tools waiting to be unlocked to improve us as developers&lt;/p&gt;</content><author><name></name></author><category term="code" /><category term="future" /><summary type="html">What if when you looked a variable or a function you knew roughly what was contained inside of them</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://brentbrinkley.com/images/post-images/codes.jpg" /></entry><entry><title type="html">My Journey As a Developer pt. 1</title><link href="http://brentbrinkley.com/dev-journey-pt1/" rel="alternate" type="text/html" title="My Journey As a Developer pt. 1" /><published>2017-07-04T00:00:00-04:00</published><updated>2017-07-04T00:00:00-04:00</updated><id>http://brentbrinkley.com/dev-journey-pt1</id><content type="html" xml:base="http://brentbrinkley.com/dev-journey-pt1/">&lt;p&gt;I got into coding unintentionally. I began developing a concept of music composition that hadn’t been done before back in 2009. As I developed this thing it became apparent that in order to do this I was going to need a computer program. I had built assets and diagrams, written out thorough explainations, and described every facet of this language that only existed in my head. But it was stuck in this format and there wasn’t anywhere else I could go at the moment. So I put it to the side.&lt;/p&gt;

&lt;p&gt;I initially started dabbling in code in 2012. I was working at a dealership and &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt; had just become a thing. I remember briefly trying &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; and &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;, which eventually ended up being two of my favorite languages. During that time however, I just really wasn’t dedicated to learning how to code. I was really just exploring to see what programming was all about.&lt;/p&gt;

&lt;p&gt;Fast forward a few years and there was a resurgence of these music ideas. A component of it that I’d had trouble with all of a sudden became crystal clear. I knew that If this was going to happen I needed to get serious and I needed to do it now. I struggled for the first year. I started out learning Javascript, and then in June of 2014 Apple announced Swift out of nowhere at WWDC. I didn’t know much, but I knew I wanted to be on mobile devices more than anything. So I began learning Swift in earnest. I slowly found out that with Swift being such a new language I was standing on shaky ground. It didn’t help that I didn’t find Swift to be a particularly easy language to learn. So I had to change my approach.&lt;/p&gt;

&lt;p&gt;Something made me double back to Ruby. I remember liking the syntax and when I went back to it I’d discovered that it was way easier for me to wrap my mind around it’s concepts than Swift. I didn’t need to understand the difference between a Struct and a Class because there were only classes. I didn’t need to know the difference between functions and methods because there were only methods. So it was with this simplicity in mind that I dove into learning Ruby.&lt;/p&gt;

&lt;p&gt;Jumping forward a couple of months I was completely absorbed in the process of self teaching, but I felt like I wasn’t getting anywhere skill wise. I saw something about coding bootcamps but everything seemed to be priced far out of my budget. That’s when &lt;a href=&quot;https://launchschool.com/&quot;&gt;LaunchSchool&lt;/a&gt; seemed to pop up out of nowhere. I’m eternally grateful that they did. They had great reviews and they seemed to be decently priced. I would be cutting it close financially to enroll in this course but I had to try.&lt;/p&gt;

&lt;p&gt;As I worked through the course material I was having small epiphanies every day. Then one day during one of the course projects everything just kind of clicked for me. Concepts that had eluded me before were suddenly crystal clear. And the first thing I did was build a skeleton for my original idea. It was at that point I started believing that maybe I could really do this.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;&lt;strong&gt;&lt;em&gt;to be continued….&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;</content><author><name></name></author><category term="code" /><category term="development" /><summary type="html">I got into coding unintentionally.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://brentbrinkley.com/images/post-images/pile.jpg" /></entry></feed>